Spring Cloud
基于Spring Boot实现的云应用开发工具
为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供一种简单的开发方式

微服务架构: 将一个完整的应用从数据存储开始垂直拆分成多个不同的服务，每个服务都能独立部署、独立维护、独立扩展，服务与服务间通过诸如RESTful API的方式互相调用


服务治理：
Spring Cloud 为服务治理做了一层抽象接口，在Spring Cloud应用中可以支持多种不同的服务治理框架，比如：Netflix Eureka、Consul、Zookeeper
在 Spring Cloud 服务治理抽象层的作用下，可以无缝地切换服务治理实现，并且不影响任何其他的服务注册、服务发现、服务调用等逻辑

服务治理框架一：
Spring Cloud Netflix Eureka：
创建“服务注册中心”：spring-cloud-eureka-server
    主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等
    Maven 依赖：
        <!--服务治理框架一：Spring Cloud Eureka-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
            <version>2.2.3.RELEASE</version>
        </dependency>
    添加注解：在应用主类添加 @EnableEurekaServer 注解启动一个服务注册中心，提供给其他应用进行对话
        如：@EnableEurekaClient
           @SpringBootApplication
           public class SpringCloudProjectApplication {}
        注：todo 在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己
        在 application.properties 配置文件中禁用应用主类的客户端注册行为：
           # 配置访问的端口 默认：Tomcat started on port(s): 8080 (http) with context path ''
           server.port=8080
           #server.servlet.context-path="/cn"
           # eureka 服务客户端注册配置
           eureka.instance.hostname=localhost
           # 禁用应用主类的客户端注册行为 #是否向服务注册中心注册自己
           eureka.client.register-with-eureka=false
           #是否检索服务
           eureka.client.fetch-registry=false
           #服务注册中心的配置内容，指定服务注册中心的位置
           eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

创建“服务提供方”：spring-cloud-eureka-client 在"服务注册中心"注册该客户端，服务提供者也是客户端
    添加注解：在应用主类添加 @EnableEurekaClient 注解表明一个服务客户端
    在 application.properties 配置文件中配置客户端：
        spring.application.name=spring-cloud-eureka-client
        # 配置访问的端口 默认：Tomcat started on port(s): 8080 (http) with context path ''
        server.port=8082
        #server.servlet.context-path="/cn"
        # eureka 客户端注册配置
        eureka.instance.hostname=localhost
        #服务注册中心的配置内容，指定服务注册中心的位置
        eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:8081/eureka/
    注：todo 多个客户端可以实现负载均衡，要求 spring.application.name=spring-cloud-eureka-client 一致

创建"服务消费者"：spring-cloud-eureka-consumer 在"服务注册中心"注册该客户端，消费者也是客户端
    添加注解：在应用主类添加 @EnableEurekaClient 注解表明一个服务客户端
    添加注解：在应用主类添加 @EnableEurekaClient 注解表明一个服务客户端
        在 application.properties 配置文件中配置客户端：
        spring.application.name=spring-cloud-eureka-consumer
        # 配置访问的端口 默认：Tomcat started on port(s): 8080 (http) with context path ''
        server.port=8088
        #server.servlet.context-path="/cn"
        # eureka 客户端注册配置
        eureka.instance.hostname=localhost
        #服务注册中心的配置内容，指定服务注册中心的位置
        eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:8081/eureka/
    注：todo "消费端"可以使用 RestTemplate 发起http请求，请求"服务提供者"的方法；同样，"服务提供者"也可以使用 RestTemplate 请求"消费端"的方法
    方式一：在应用主类中初始化 RestTemplate：
               /**
                * 初始化RestTemplate，用来发起REST请求
                * @return
                */
               @LoadBalanced
               @Bean
               public RestTemplate rest() {
                   return new RestTemplate();
               }
           在控制器中注入 RestTemplate 实体类：
               @Autowired
               RestTemplate restTemplate;
               @GetMapping("/user")
               public Map<String, Object> getUser(@RequestParam long id){
                   Map<String,Object> data = new HashMap<>();
                   data = restTemplate.getForObject("http://spring-cloud-eureka-client/user/" + id, Map.class);
                   return data;
               }
    方式二：在应用主类中初始化 RestTemplate：
               //初始化RestTemplate，用来发起REST请求
               @Bean
               public RestTemplate rest() {
                   return new RestTemplate();
               }
           在控制器中注入 RestTemplate 实体类：
               @Autowired
               RestTemplate restTemplate;
               @Autowired
               LoadBalancerClient loadBalancerClient;
               @GetMapping("/user")
               public Map<String, Object> getUser(@RequestParam long id){
                   ServiceInstance serviceInstance = loadBalancerClient.choose("eureka-client");
                   String url = "http://" + serviceInstance.getHost() + ":" + serviceInstance.getPort() + "/user/";
                   Map<String,Object> data = new HashMap<>();
                   data = restTemplate.getForObject(url + id, Map.class);
                   return data;
               }

服务治理框架二：
Spring Cloud Consul：
创建“服务注册中心”：不同于 Eureka，Consul 自身提供了服务端，只需直接下载 Consul 服务端程序就可以使用
    使用 $consul agent -dev 命令启动 consul 的开发模式
创建“服务提供方”：spring-cloud-consul-client
    Maven 依赖：
        <!--服务治理框架二：Spring Cloud Consul-->
        <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-consul-discovery</artifactId>
        </dependency>
    添加注解：在应用主类添加 @EnableDiscoveryClient 注解表明一个服务客户端
    在 application.properties 配置文件中配置客户端：
        spring.application.name=spring-cloud-consul-client
        # 配置访问的端口 默认：Tomcat started on port(s): 8080 (http) with context path ''
        server.port=8082
        #server.servlet.context-path="/cn"
        spring.cloud.consul.host=localhost
        spring.cloud.consul.port=8500
